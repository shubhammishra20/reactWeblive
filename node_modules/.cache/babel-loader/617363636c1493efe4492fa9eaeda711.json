{"ast":null,"code":"var _jsxFileName = \"E:\\\\reacttut\\\\awesomeapp\\\\src\\\\Todo.js\",\n    _s = $RefreshSig$();\n\nimport Raect, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getLocalItem = () => {\n  let local = localStorage.getItem(\"Lists\");\n\n  if (local) {\n    return JSON.parse(local);\n  } else return [];\n};\n\nconst Todo = () => {\n  _s();\n\n  const [set, setName] = useState(\"\");\n  const [list, setList] = useState(getLocalItem());\n\n  const handle = e => {\n    setName(e.target.value);\n  };\n\n  const listName = () => {\n    if (!set) {} else {\n      const allSet = {\n        id: new Date().getTime().toString(),\n        name: set\n      };\n      setList([...list, allSet]);\n      setName(\"\");\n    }\n  };\n\n  const deleteItem = idx => {\n    const updated = list.filter(val => {\n      return idx !== val.id;\n    });\n    setList(updated);\n  };\n\n  const removeItm = () => {\n    setList([]);\n  };\n\n  if (list.length === 0) {\n    var x = true;\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\"Lists\", JSON.stringify(list));\n  }, [list]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My To Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handle,\n        value: set,\n        placeholder: \"Title...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: listName,\n        className: \"addBtn\",\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [x ? /*#__PURE__*/_jsxDEV(\"th\", {\n        style: {\n          fontSize: 25\n        },\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"red\"\n          },\n          children: \"Data is Not Available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 4\n      }, this) : /*#__PURE__*/_jsxDEV(\"th\", {\n        style: {\n          fontSize: 25\n        },\n        children: \"Added List Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 3\n      }, this), list.map(val => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => deleteItem(val.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 4\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"lst\",\n            children: [val.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => deleteItem(val.id),\n              className: \"rmv\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 8\n            }, this)]\n          }, val.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 1\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: removeItm,\n        className: \"rmv1\",\n        children: \"Remove All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Todo, \"lma/rPv5ywieCsncu8O82S0Gmn8=\");\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["E:/reacttut/awesomeapp/src/Todo.js"],"names":["Raect","useState","useEffect","getLocalItem","local","localStorage","getItem","JSON","parse","Todo","set","setName","list","setList","handle","e","target","value","listName","allSet","id","Date","getTime","toString","name","deleteItem","idx","updated","filter","val","removeItm","length","x","setItem","stringify","fontSize","color","map"],"mappings":"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","sourcesContent":["import Raect,{useState,useEffect} from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst getLocalItem = ()=>{\r\n  let local = localStorage.getItem(\"Lists\");\r\n  if(local){\r\n    return(JSON.parse(local));\r\n\r\n  }\r\n  else\r\n    return([]);\r\n}\r\n\r\nconst Todo = ()=>{\r\n\r\nconst[set,setName] = useState(\"\");\r\n\r\nconst[list,setList] = useState(getLocalItem());\r\n\r\nconst handle = (e)=>{\r\n\tsetName(e.target.value);\r\n};\r\n\r\nconst listName = ()=>{\r\n  if(!set)\r\n  {\r\n\r\n  }\r\n  else{\r\nconst allSet = {\r\n  id:new Date().getTime().toString(),\r\n  name:set\r\n};\r\n\tsetList([...list, allSet]);\r\n  setName(\"\");\r\n}\r\n};\r\n\r\nconst deleteItem = (idx)=>{\r\nconst updated = list.filter((val)=>{\r\n  return idx!==val.id;\r\n})\r\nsetList(updated);\r\n};\r\n\r\nconst removeItm = ()=>{\r\n  setList([]);\r\n};\r\nif(list.length===0){\r\n  var x = true;\r\n}\r\n\r\nuseEffect(()=>{\r\n\r\nlocalStorage.setItem(\"Lists\",JSON.stringify(list))\r\n\r\n},[list] );\r\n\r\n\treturn(<>\r\n\r\n    <div className=\"header\">\r\n                 <h2>My To Do List</h2>\r\n       <input type=\"text\" onChange={handle} value={set} placeholder=\"Title...\" />\r\n      \r\n      <span onClick={listName} className=\"addBtn\">Add</span>\r\n    </div>\r\n\r\n<ul>\r\n{x?\r\n   <th style={{fontSize:25}}> <span style={{color:\"red\"}}>Data is Not Available</span></th>:\r\n  <th style={{fontSize:25}}>Added List Data:</th>\r\n  \r\n}\r\n  {\r\n    list.map((val)=>{\r\n      return(\r\n<div>\r\n   <span onClick={ ()=>deleteItem(val.id)} >Delete</span>\r\n\r\n      <li className=\"lst\" key={val.id}>{val.name}\r\n\r\n       <span onClick={ ()=>deleteItem(val.id)} className=\"rmv\">Delete</span>\r\n\r\n      </li>\r\n      \r\n  </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  <br/><br/>\r\n<span onClick={removeItm} className=\"rmv1\">Remove All</span>\r\n\r\n</ul>\r\n\r\n\t\t</>)\r\n};\r\n\r\nexport default Todo;"]},"metadata":{},"sourceType":"module"}